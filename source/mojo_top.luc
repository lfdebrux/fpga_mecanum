module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input signal[4]         // servo signal
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    pipeline sync[4] (#DEPTH(2));

    .rst(rst) {
      servo_read forwd;
      servo_read sidew;
      servo_read rotat;
      servo_read throt;
      pwm led_pwm1;
      pwm led_pwm2;
      pwm led_pwm3;
      pwm led_pwm4;
    }
  }
  
  sig mot[4][16];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    sync.in = signal;
    
    forwd.servo = sync.out[0];
    sidew.servo = sync.out[1];
    rotat.servo = sync.out[2];
    throt.servo = sync.out[3];
    
    
    mot[0] = sidew.position + forwd.position + rotat.position;
    mot[1] = sidew.position - forwd.position - rotat.position;
    mot[2] = sidew.position - forwd.position + rotat.position;
    mot[3] = sidew.position + forwd.position - rotat.position;
    
    led_pwm1.value = $signed(mot[0]) + 4;
    led_pwm2.value = $signed(mot[1]) + 4;
    led_pwm3.value = $signed(mot[2]) + 4;
    led_pwm4.value = $signed(mot[3]) + 4;
    
    led[0] = led_pwm1.pulse;
    led[1] = led_pwm2.pulse;
    led[2] = led_pwm3.pulse;
    led[3] = led_pwm4.pulse;
    led_pwm1.update = 1;
    led_pwm2.update = 1;
    led_pwm3.update = 1;
    led_pwm4.update = 1;
    
    led[4] = signal[0];
    led[5] = signal[1];
    led[6] = signal[2];
    led[7] = signal[3];
  }
}
