module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    input pwm_in[4],        // servo signal
    output pwm_out[4]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    pipeline sync[4] (#DEPTH(2));

    .rst(rst) {
      servo_read forwd;
      servo_read sidew;
      servo_read rotat;
      servo_read throt;
      //pwm debug_pwm1 (#WIDTH(16));
      //pwm debug_pwm2 (#WIDTH(16));
      //pwm debug_pwm3 (#WIDTH(16));
      //pwm debug_pwm4 (#WIDTH(16));
      servo motor1 (#RESOLUTION(16));
      servo motor2 (#RESOLUTION(16));
      servo motor3 (#RESOLUTION(16));
      servo motor4 (#RESOLUTION(16));
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    motor = 4h00;
    debug = 4h00;
    
    // inputs
    sync.in = pwm_in;
    led[7:4] = pwm_in;

    // outputs
    pwm_out = c{motor1.servo, motor2.servo, motor3.servo, motor4.servo};
    debug = c{motor1.servo, motor2.servo, motor3.servo, motor4.servo};

    //logic
    forwd.servo = sync.out[0];
    sidew.servo = sync.out[1];
    rotat.servo = sync.out[2];
    throt.servo = sync.out[3];
    
    motor1.position = forwd.position + sidew.position + rotat.position;
    motor2.position = forwd.position - sidew.position - rotat.position;
    motor3.position = forwd.position - sidew.position + rotat.position;
    motor4.position = forwd.position + sidew.position - rotat.position;
  }
}
